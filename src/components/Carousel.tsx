import { useEffect, useState } from "react";
import axios from "axios";

const Carousel = ({ images }: { images: string[] }) => {
  const [currentSlide, setCurrentSlide] = useState(0);
  const [selectedImage, setSelectedImage] = useState("");
  const totalSlides = Math.ceil(images.length / 10);

  const [imageNames, setImageNames] = useState<any>({});

  const startImageIndex = currentSlide * 10;
  const endImageIndex = startImageIndex + 10;
  const currentImages = images.slice(startImageIndex, endImageIndex);

  const prevSlide = () => {
    setCurrentSlide((prevSlide) =>
      prevSlide === 0 ? totalSlides - 1 : prevSlide - 1
    );
  };

  const nextSlide = () => {
    setCurrentSlide((prevSlide) =>
      prevSlide === totalSlides - 1 ? 0 : prevSlide + 1
    );
  };

  const openImageModal = (image: string) => {
    setSelectedImage(image);
  };

  const closeImageModal = () => {
    setSelectedImage("");
  };

  const extractImageNumber = (_image: string) => {
    const splitUrl = _image.split(".nftstorage.link//");
    const number = splitUrl[splitUrl.length - 1].split(".")[0]; // This will give you '1219'
    return number;
  };
  const prevImage = () => {
    const currentIndex = images.indexOf(selectedImage);
    console.log("currentIndex", currentIndex);

    if (currentIndex > 0) {
      const _image = images[currentIndex - 1];
      if (currentIndex - 1 <= 9) {
        setCurrentSlide(0);
      } else {
        setCurrentSlide(1);
      }
      setSelectedImage(_image);
    }
  };

  const nextImage = () => {
    const currentIndex = images.indexOf(selectedImage);

    if (currentIndex < images.length - 1) {
      const _image = images[currentIndex + 1];
      if (currentIndex + 1 > 9) {
        setCurrentSlide(1);
      } else {
        setCurrentSlide(0);
      }
      extractImageNumber(_image);
      setSelectedImage(_image);
    }
  };
  const [prevImages, setPrevImages] = useState<string[]>([]);

  useEffect(() => {
    if (currentImages === prevImages) {
      // currentImages hasn't changed, so we don't need to do anything
      return;
    }
    const fetchImageNames = async () => {
      const promises = currentImages.map((img) => {
        const num = extractImageNumber(img);
        return axios.get(
          `https://bafybeih2vgdf4rfizdhe3m6hsvghejkbqkpaesrx75o7w5qucddqwokv7a.ipfs.dweb.link/${num}.json`
        );
      });

      const results = await Promise.all(promises);

      const newImageNames = results.reduce((acc: any, { data }, index) => {
        acc[index] = data.name.split(":").slice(1).join(":").trim();
        return acc;
      }, {});

      console.log("newImageNames", newImageNames);
      setImageNames((prevImageNames: any) => ({
        ...prevImageNames,
        ...newImageNames,
      }));
    };

    fetchImageNames();

    // Remember the current images for next time
    setPrevImages(currentImages);
  }, []);

  return (
    <div className="relative">
      <div className="flex gap-3 items-center justify-center overflow-hidden">
        <button
          className="bg-transparent px-2 py-1 rounded text-white"
          onClick={prevSlide}
        >
          <img src="arrow-left.svg" />
        </button>
        <div className="grid grid-cols-1 gap-2  w-[375px] lg:max-w-full lg:w-full  lg:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-5">
          {currentImages.map((image, index) => (
            <div key={index} className="p-2 w-[325px] lg:w-full">
              <img
                src={image}
                alt={`Image ${index + 1}`}
                className="w-full h-auto cursor-pointer rounded-md"
                onClick={() => openImageModal(image)}
              />
              <p className="text-[#B5B5B5] text-center text-[17px]">
                {imageNames[`${index}`]}
              </p>
            </div>
          ))}
        </div>
        <button
          className="bg-transparent px-2 py-1 rounded"
          onClick={nextSlide}
        >
          <img src="arrow-left.svg" className="rotate-180" />
        </button>
      </div>

      {selectedImage && (
        <div className="fixed inset-0 bg-black flex items-center justify-center">
          <button
            className="absolute top-1/2 left-4 text-white bg-transparent transform -translate-y-1/2"
            onClick={prevImage}
            disabled={images.indexOf(selectedImage) === 0}
          >
            <img src="arrow-left.svg" />
          </button>
          <button
            className="absolute top-1/2 right-4 text-white bg-transparent transform -translate-y-1/2"
            onClick={nextImage}
            disabled={images.indexOf(selectedImage) === images.length - 1}
          >
            <img src="arrow-left.svg" className="rotate-180" />
          </button>
          <div className="relative">
            <div>
              <img
                src={selectedImage}
                alt="Selected Image"
                className="max-w-full h-[425px] lg:max-h-[80vh]"
              />
            </div>

            <p className="text-[#B5B5B5] text-center text-[24px]">
              {imageNames[currentImages.indexOf(selectedImage)]}
            </p>
            <button
              onClick={closeImageModal}
              className="bg-transparent absolute top-0 -right-20 p-4"
            >
              <svg
                width="35"
                height="35"
                viewBox="0 0 35 35"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
                preserveAspectRatio="none"
              >
                <path
                  d="M34.3444 30.9193C34.2694 30.794 34.1709 30.6944 34.0528 30.6257L31.1342 27.9627C30.9905 27.7912 30.8386 27.5993 30.7 27.4227C30.4813 27.1445 30.3356 26.9618 30.2165 26.8365C30.0368 26.5912 29.812 26.4084 29.6118 26.2442C29.4917 26.1477 29.3654 26.0491 29.2186 25.8869C29.1652 25.8356 29.1242 25.7945 29.0924 25.7617C29.0534 25.6354 28.9784 25.505 28.8675 25.3572C28.8306 25.2268 28.7741 25.1026 28.6735 24.9999C28.6027 24.9291 28.4969 24.8244 28.3676 24.7341C28.2947 24.6591 28.2218 24.5821 28.1438 24.498C27.8687 24.1982 27.6182 23.9241 27.3338 23.7722C27.2291 23.6449 27.1726 23.5658 27.1275 23.5032C27.0351 23.3728 26.9714 23.2876 26.8308 23.1521C26.7333 23.0576 26.6173 22.993 26.4941 22.956C26.4212 22.8739 26.3503 22.7907 26.2918 22.723C25.9685 22.3483 25.7067 22.0444 25.4521 21.8586C25.2919 21.7128 25.0835 21.6286 24.8556 21.644C24.8002 21.5629 24.7314 21.4931 24.6503 21.4356C24.4471 21.2919 24.1822 21.023 23.9266 20.7622C23.8475 20.6811 23.7695 20.6041 23.6915 20.5271C23.556 20.214 23.248 20.0272 22.9133 20.0415C22.9062 20.0354 22.899 20.0272 22.8918 20.022L22.8712 19.9789C22.8528 19.9399 22.8312 19.9019 22.8066 19.866C22.5674 19.518 22.3672 19.2973 22.1485 19.1618C22.1259 19.1227 22.0993 19.0858 22.0695 19.0499C21.7913 18.7183 21.6886 18.5735 21.4843 18.285C21.4761 18.2738 21.4648 18.2666 21.4566 18.2563C21.4279 18.2173 21.3889 18.1721 21.3375 18.1177C21.395 18.0643 21.4556 18.0068 21.5213 17.9463C21.5993 17.8724 21.6506 17.782 21.6938 17.6886C21.858 17.6106 21.9945 17.4833 22.0777 17.3129C22.6382 16.7349 23.1443 16.2719 23.481 16.0368C23.6186 15.9403 23.7213 15.8069 23.7798 15.6549C24.0221 15.4691 24.1422 15.271 24.1925 15.0872L24.2551 14.9969C24.3198 14.925 24.3742 14.8563 24.4265 14.7875C24.4686 14.732 24.4953 14.7043 24.5261 14.6776C24.6555 14.6088 24.7622 14.5072 24.8402 14.382C24.9131 14.3019 24.9891 14.2064 25.0466 14.0873C25.2078 13.9713 25.3258 13.8163 25.3997 13.6172L25.4162 13.612C25.4993 13.5823 25.5773 13.5391 25.6471 13.4847C26.0034 13.2076 26.1532 12.9807 26.298 12.761C26.3555 12.6758 26.413 12.5895 26.493 12.4848C26.8544 12.5074 27.2127 12.297 27.339 11.9346L27.3451 11.9202C27.3677 11.9058 27.3903 11.8904 27.4129 11.873C27.5915 11.7344 27.7013 11.6061 27.7876 11.4706C27.9549 11.334 28.073 11.14 28.0935 10.91L28.1027 10.8053C28.112 10.6924 28.0904 10.5867 28.0565 10.484C28.0914 10.4419 28.1274 10.4009 28.1643 10.3619C28.305 10.3105 28.4302 10.2202 28.5257 10.099L28.5821 10.0272C28.6807 9.97894 28.771 9.9081 28.845 9.82084L29.233 9.36093C29.2802 9.30447 29.3182 9.24493 29.348 9.18127C29.3993 9.12276 29.4486 9.0663 29.4938 9.01908C29.5471 8.99341 29.5995 8.96261 29.6477 8.92566C30.119 8.56327 30.4269 8.15572 30.7246 7.76151C30.7965 7.66604 30.8694 7.56954 30.9464 7.47099C30.9762 7.45764 31.0039 7.44327 31.0316 7.42582C31.2246 7.30878 31.3478 7.17328 31.4248 7.03879C31.5089 6.97411 31.5798 6.89301 31.6352 6.80165C31.6999 6.7729 31.7789 6.73389 31.8611 6.67846C31.9309 6.63124 31.9925 6.57477 32.0438 6.51113C32.2542 6.46082 32.439 6.32942 32.555 6.14155C32.6926 6.05224 32.8004 5.92392 32.864 5.77609C32.9554 5.69293 33.0437 5.60054 33.1299 5.50097C33.2706 5.42807 33.3712 5.33363 33.4276 5.28025C33.4738 5.23713 33.5159 5.18683 33.5508 5.13447L34.1647 4.20028C34.3372 3.9385 34.3403 3.61512 34.2027 3.35745C34.1729 3.24247 34.1237 3.1316 34.0549 3.0351C34.0056 2.91294 33.9255 2.80001 33.8177 2.70968C33.3322 2.30417 33.2172 2.16969 33.0581 1.98388C32.9718 1.88327 32.8784 1.77343 32.7367 1.62663C32.6649 1.55066 32.5817 1.49214 32.4934 1.45108C32.4698 1.42439 32.4452 1.39565 32.4175 1.3669C32.2922 1.23652 32.1341 1.15542 31.9668 1.12565C31.8939 1.07535 31.7707 0.980904 31.6116 0.829994C31.3139 0.548706 30.8612 0.532284 30.546 0.773529C30.5183 0.785851 30.4906 0.799198 30.4639 0.813568C30.235 0.86079 30.0296 1.00451 29.9095 1.22112L29.7011 1.59788C29.6662 1.63381 29.6313 1.6718 29.5964 1.71183C29.5184 1.7529 29.4455 1.80628 29.3808 1.87404L28.5801 2.71481C28.5134 2.73534 28.4466 2.76511 28.385 2.80309C28.23 2.89959 28.1151 3.04126 28.0514 3.20552L28.0237 3.23118C27.9272 3.32563 27.7824 3.46627 27.69 3.65927C27.6346 3.71676 27.5823 3.7763 27.533 3.83379C27.4067 3.87588 27.2897 3.94877 27.1952 4.04937C26.9109 4.34811 26.7179 4.61091 26.531 4.86448C26.3083 5.16732 26.1132 5.43116 25.7662 5.75761C25.3905 5.96806 25.0076 6.37048 24.4953 6.93305C24.3701 7.07061 24.2489 7.20305 24.0929 7.36832L23.3034 8.34461C22.8692 8.88357 22.4678 9.38146 21.9422 10.0097C21.47 10.3311 21.0952 10.8043 20.7318 11.2632C20.4772 11.5835 20.2144 11.9151 19.9773 12.105C19.8592 12.1994 19.7699 12.3237 19.7176 12.4653L19.7135 12.4776C19.4681 12.6819 19.2515 12.9304 19.0246 13.1901C18.7865 13.4642 18.5391 13.7486 18.2742 13.9487C18.1869 14.0145 18.114 14.0966 18.0596 14.19C17.9888 14.3122 17.9467 14.3758 17.9262 14.4025C17.9087 14.4251 17.8933 14.4477 17.879 14.4703C17.8287 14.4898 17.7814 14.5144 17.7373 14.5411C17.6695 14.4754 17.5884 14.4323 17.5063 14.3943C17.4303 14.2362 17.3061 14.1079 17.1439 14.0247C16.5598 13.4591 16.0917 12.9478 15.8556 12.6091C15.7601 12.4725 15.6266 12.3699 15.4747 12.3113C15.2889 12.0691 15.0918 11.949 14.907 11.8987L14.8166 11.836C14.7448 11.7703 14.676 11.7169 14.6062 11.6646C14.5528 11.6235 14.5261 11.5989 14.5005 11.5701C14.4317 11.4387 14.327 11.3289 14.1997 11.2498C14.1196 11.177 14.0252 11.101 13.9071 11.0445C13.7911 10.8834 13.6361 10.7653 13.4369 10.6904L13.4318 10.675C13.402 10.5918 13.3589 10.5138 13.3045 10.444C13.0273 10.0878 12.8004 9.93787 12.5807 9.79313C12.4955 9.73563 12.4083 9.67815 12.3046 9.59705C12.3354 9.23055 12.1157 8.87843 11.7543 8.75216L11.741 8.74703C11.7266 8.72342 11.7102 8.70083 11.6927 8.67825C11.5583 8.50373 11.4299 8.39388 11.2944 8.30663C11.1579 8.13621 10.9598 8.01816 10.7257 7.99762L10.622 7.98941C10.5081 7.97504 10.4013 7.99557 10.2997 8.03047C10.2586 7.99762 10.2196 7.96375 10.1826 7.92884C10.1303 7.78717 10.0399 7.65988 9.9188 7.5644L9.84694 7.50794C9.79766 7.40939 9.72888 7.32008 9.6406 7.24513L9.17966 6.85811C9.12423 6.80986 9.06365 6.7729 9 6.74211C8.94252 6.69283 8.88708 6.64356 8.83883 6.59736C8.81317 6.54295 8.78237 6.49162 8.74541 6.44235C8.38405 5.97217 7.97547 5.66419 7.58126 5.36648C7.48681 5.29564 7.39032 5.22276 7.29074 5.14576C7.27739 5.11599 7.26199 5.08725 7.24557 5.05953C7.12751 4.86653 6.99303 4.74334 6.85752 4.66532C6.79284 4.5832 6.71277 4.51133 6.62141 4.45692C6.59266 4.39225 6.55468 4.31423 6.49924 4.2321C6.45201 4.16024 6.39453 4.09864 6.33088 4.04732C6.28057 3.83687 6.14815 3.65208 5.96131 3.5371C5.872 3.39851 5.7447 3.29073 5.59584 3.22707C5.51372 3.13776 5.42235 3.04845 5.32072 2.96119C5.24886 2.82055 5.15338 2.71891 5.1 2.66245C5.05586 2.61625 5.00658 2.57519 4.9532 2.54029L4.02003 1.92639C3.75928 1.75392 3.43591 1.74981 3.17823 1.88738C3.06223 1.91715 2.95033 1.96745 2.8528 2.03829C2.73166 2.08756 2.61977 2.16661 2.53045 2.27338C2.12495 2.75895 1.98944 2.87393 1.80363 3.03408C1.702 3.11928 1.59421 3.2127 1.44638 3.35437C1.37041 3.42521 1.31292 3.50836 1.27083 3.59767C1.24414 3.62025 1.21642 3.64489 1.18768 3.67262C1.05628 3.79786 0.974149 3.95698 0.944378 4.12534C0.895103 4.19823 0.800657 4.32142 0.649746 4.47951C0.369491 4.77722 0.353065 5.22994 0.59431 5.54511C0.605606 5.57283 0.61895 5.59951 0.633323 5.62621C0.680547 5.85616 0.824268 6.06148 1.04088 6.18159L1.41763 6.38896C1.45357 6.42489 1.49155 6.4598 1.53056 6.49367C1.57162 6.57272 1.62603 6.64561 1.69379 6.71029L2.53456 7.50999C2.55509 7.57672 2.58384 7.64242 2.62182 7.70402C2.71729 7.86006 2.86102 7.97504 3.02527 8.03972L3.05196 8.06743C3.14538 8.16393 3.28602 8.30868 3.47902 8.40107C3.53651 8.45651 3.59605 8.50784 3.65354 8.55814C3.69563 8.68441 3.76852 8.80247 3.86912 8.89691C4.16786 9.17923 4.42964 9.37222 4.68321 9.55804C4.98605 9.78183 5.25091 9.97688 5.57634 10.3249C5.78679 10.7006 6.19024 11.0835 6.75281 11.5968C6.89037 11.7211 7.0228 11.8422 7.18808 11.9982L8.17668 12.7979C8.71051 13.2281 9.20635 13.6274 9.82949 14.1489C10.1498 14.6212 10.623 14.9959 11.0819 15.3593C11.4022 15.6128 11.7348 15.8767 11.9237 16.1138C12.0182 16.2309 12.1434 16.3212 12.2851 16.3735L12.2984 16.3777C12.5017 16.624 12.7501 16.8406 13.0099 17.0655C13.284 17.3057 13.5683 17.5531 13.7675 17.8169C13.8332 17.9032 13.9153 17.9771 14.0087 18.0315C14.1268 18.1003 14.1904 18.1413 14.2181 18.1619C14.2418 18.1803 14.2654 18.1968 14.29 18.2122C14.3126 18.2696 14.3403 18.322 14.3732 18.3723C14.2346 18.5366 14.0908 18.7203 13.944 18.9267C13.8835 18.977 13.8219 19.0386 13.7613 19.1125C13.207 19.3814 12.9708 19.8568 12.8281 20.1442C12.8138 20.174 12.7973 20.2007 12.783 20.2304C12.7707 20.2397 12.7594 20.2438 12.747 20.254C12.7275 20.2674 12.707 20.2807 12.6875 20.2951C12.5848 20.3731 12.513 20.4737 12.4586 20.5836L12.4565 20.5877C12.3836 20.6554 12.3128 20.7396 12.2461 20.8515C11.5162 21.5311 10.775 22.3637 9.99066 23.2435C9.42501 23.8789 8.84089 24.5349 8.26908 25.119C8.19003 25.2001 8.13049 25.2936 8.09148 25.3942C8.05555 25.4352 8.01962 25.4773 7.98368 25.5184C7.80198 25.7278 7.57613 25.9906 7.44473 26.083C7.05154 26.3622 6.84931 26.777 6.72714 27.0244L6.73022 27.047C6.7025 27.0808 6.67684 27.1157 6.65528 27.1537C6.64501 27.1712 6.63167 27.1845 6.61935 27.1989C6.51361 27.2369 6.41301 27.2913 6.32677 27.3734C6.30521 27.394 6.28571 27.4155 6.2662 27.4391L6.24978 27.4576C6.23848 27.473 6.2272 27.4874 6.21693 27.5028C6.20769 27.5141 6.2005 27.5254 6.19434 27.5346H6.19537L6.19332 27.5387C6.10093 27.6619 6.01572 27.7912 5.93051 27.9268C5.80937 28.1208 5.70261 28.2922 5.54041 28.4493C5.24578 28.6156 5.00966 28.9328 4.71195 29.3311C4.62059 29.4543 4.53435 29.5744 4.46249 29.6607C4.41219 29.6853 4.36497 29.7171 4.3198 29.752C4.28797 29.7777 4.2582 29.8064 4.23048 29.8352C3.88555 30.1247 3.62582 30.4491 3.40305 30.7273L2.87333 31.3494C2.73577 31.5013 2.59308 31.6533 2.42985 31.8114C2.2851 31.8883 2.16191 32.0085 2.08184 32.1645L2.00484 32.3144C1.80876 32.6983 1.94222 33.1695 2.30974 33.3933C3.13614 33.8964 3.84141 34.2834 4.405 34.5441C4.52614 34.6006 4.65651 34.6304 4.78587 34.6304C4.91932 34.6304 5.05175 34.5975 5.17084 34.5257C5.29711 34.4507 5.39874 34.3511 5.46752 34.232L8.12946 31.3145C8.3009 31.1697 8.4939 31.0178 8.6715 30.8782C8.94868 30.6605 9.12936 30.5158 9.2546 30.3967C9.49995 30.2171 9.68268 29.9922 9.84591 29.7921C9.94344 29.672 10.043 29.5457 10.2042 29.3979C10.2555 29.3455 10.2966 29.3044 10.3294 29.2716C10.4557 29.2326 10.5851 29.1587 10.7339 29.0488C10.8643 29.0119 10.9885 28.9544 11.0912 28.8538C11.162 28.7829 11.2667 28.6772 11.357 28.5478C11.432 28.4749 11.51 28.401 11.5942 28.323C11.894 28.0489 12.167 27.7984 12.319 27.5141C12.4473 27.4083 12.5263 27.3519 12.589 27.3067C12.7173 27.2164 12.8025 27.1527 12.937 27.0131C13.0324 26.9145 13.0981 26.7985 13.1351 26.6743C13.2172 26.6014 13.3004 26.5306 13.3681 26.4721C13.7449 26.1477 14.0498 25.8849 14.2356 25.6282C14.3803 25.4681 14.4573 25.2556 14.4471 25.0359C14.5282 24.9815 14.599 24.9106 14.6565 24.8295C14.8002 24.6273 15.0692 24.3624 15.3299 24.1068C15.41 24.0278 15.487 23.9498 15.565 23.8728C15.8761 23.7352 16.0619 23.4293 16.0486 23.0946L16.0691 23.072L16.1112 23.0525C16.1512 23.034 16.1892 23.0115 16.2251 22.9868C16.5731 22.7476 16.7939 22.5464 16.9304 22.3288C16.9684 22.3062 17.0053 22.2795 17.0402 22.2508C17.3749 21.9705 17.5186 21.8689 17.8071 21.6635C17.8184 21.6553 17.8266 21.644 17.8379 21.6348C17.8748 21.6071 17.9169 21.5712 17.9662 21.525C18.191 21.7251 18.4467 21.9346 18.7475 22.1481C18.7967 22.2087 18.8573 22.2692 18.9322 22.3298C19.2002 22.8821 19.656 23.11 19.9619 23.2619C19.9917 23.2773 20.0194 23.2948 20.0502 23.3102C20.0584 23.3205 20.0625 23.3317 20.0728 23.343C20.0851 23.3636 20.0995 23.3841 20.1138 23.4026C20.1919 23.5063 20.2935 23.5781 20.4023 23.6325L20.4095 23.6387C20.4772 23.7095 20.5604 23.7793 20.6702 23.845C21.3519 24.576 22.1845 25.3172 23.0653 26.1015C23.6997 26.6661 24.3557 27.2502 24.9398 27.822C25.0199 27.9011 25.1133 27.9596 25.2129 27.9986C25.255 28.0356 25.296 28.0725 25.3381 28.1085C25.5486 28.2902 25.8093 28.516 25.9028 28.6464C26.181 29.0396 26.5957 29.2418 26.8441 29.364L26.8667 29.3609C26.9006 29.3886 26.9355 29.4132 26.9735 29.4358C26.992 29.4461 27.0053 29.4605 27.0207 29.4728C27.0587 29.5816 27.1152 29.6843 27.2004 29.7715C27.2219 29.7931 27.2455 29.8146 27.2702 29.8352H27.2691L27.2907 29.8516C27.303 29.8598 27.3143 29.8691 27.3266 29.8783C27.3369 29.8855 27.3472 29.8927 27.3554 29.8968L27.3595 29.8988C27.4827 29.9912 27.611 30.0764 27.7475 30.1616C27.9416 30.2828 28.112 30.3885 28.269 30.5517C28.4353 30.8453 28.7515 31.0815 29.1509 31.3792C29.273 31.4705 29.3932 31.5557 29.4794 31.6286C29.5051 31.6789 29.5359 31.7261 29.5728 31.7713C29.5985 31.8031 29.6262 31.8339 29.656 31.8606C29.9455 32.2066 30.2688 32.4663 30.547 32.6881L31.1681 33.2168C31.3211 33.3553 31.473 33.4991 31.6321 33.6623C31.7091 33.807 31.8292 33.9292 31.9843 34.0083L32.1331 34.0852C32.5181 34.2834 32.9883 34.1499 33.2131 33.7814C33.7254 32.9396 34.1011 32.2538 34.3629 31.6851C34.4768 31.4387 34.484 31.1523 34.3444 30.9193Z"
                  fill="#535353"
                ></path>
              </svg>
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Carousel;
